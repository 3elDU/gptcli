#! /usr/bin/env python3

import os
import sys
import openai
import argparse
import readline
import atexit
from rich.console import Console
from rich.markdown import Markdown

tokens_consumed: int = 0
console = Console()

histfile = os.path.join(os.path.expanduser("~"), ".gpt_history")
try:
  readline.read_history_file(histfile)
  readline.set_history_length(1000)
except FileNotFoundError:
  pass
atexit.register(readline.write_history_file, histfile)

class Main:
  def __init__(self, args):
    self.args = args

    self.tokens_consumed = 0
    self.message_history = []

    if self.args.system:
      self.message_history.append({"role": "system", "content": self.args.system})

  def process(self, prompt: str) -> str:
    completion = openai.ChatCompletion.create(
      model=self.args.model,
      temperature=self.args.temperature,
      messages=self.message_history,
      stream=True,
    )

    response = ""

    for i, chunk in enumerate(completion):
      if 'content' in chunk['choices'][0]['delta']:
        content: str = chunk['choices'][0]['delta']['content']

        if i == 1 and content == '\n\n':
          continue

        response += content
        self.tokens_consumed += 1
        sys.stdout.write(content)
        sys.stdout.flush()

    print("")
        
    return response

  def run(self):
    while True:
      prompt = input("Prompt: ")
      self.message_history.append({"role": "user", "content": prompt})

      response = self.process(prompt)
      # console.print(Markdown(response, justify="left"))
      self.message_history.append({"role": "assistant", "content": response})

      if self.args.verbose:
        print("Tokens consumed:", self.tokens_consumed)

      if len(self.message_history) > 8:
        self.message_history = self.message_history[len(self.message_history)-8:]

if __name__ == '__main__':
  openai.api_key = os.getenv("OPENAI_API_KEY")

  parser = argparse.ArgumentParser()
  parser.add_argument('-t', '--temperature', help="How random the answer should be. Values from 0 to 2", type=float, default=0)
  parser.add_argument('-m', '--model', help="Model to use", default="gpt-3.5-turbo")
  parser.add_argument('-l', '--limit', help="Maximum amount of tokens for response", type=int, default=300)
  parser.add_argument('-s', '--system', help="Add a system message")
  parser.add_argument('-v', '--verbose', help="Be more verbose", action='store_true')

  args = parser.parse_args()
  try:
    main = Main(args)
    main.run()
  except KeyboardInterrupt:
    pass
